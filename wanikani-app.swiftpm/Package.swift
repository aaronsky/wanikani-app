// swift-tools-version: 5.5

// WARNING:
// This file is automatically generated.
// Do not edit it by hand because the contents will be replaced.

import PackageDescription
import AppleProductTypes

let package = Package(
    name: "WaniKaniApp",
    platforms: [
        .iOS("15.2")
    ],
    products: [
        .iOSApplication(
            name: "WaniKaniApp",
            targets: ["AppModule"],
            bundleIdentifier: "com.sky.WaniKani",
            teamIdentifier: "52W2H99QHH",
            displayVersion: "1.0",
            bundleVersion: "1",
            iconAssetName: "AppIcon",
            accentColorAssetName: "AccentColor",
            supportedDeviceFamilies: [
                .pad,
                .phone
            ],
            supportedInterfaceOrientations: [
                .portrait,
                .landscapeRight,
                .landscapeLeft,
                .portraitUpsideDown(.when(deviceFamilies: [.pad]))
            ]
        )
    ],
    dependencies: [
        .package(url: "https://github.com/aaronsky/wanikani-swift", "0.0.2"..<"1.0.0"),
        .package(url: "https://github.com/pointfreeco/swift-composable-architecture", "0.32.0"..<"1.0.0")
    ],
    targets: [
        .executableTarget(
            name: "AppModule",
            dependencies: [
                "AppCore"
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "AppCore",
            dependencies: [
                "AuthenticationClient",
                "Home",
                "Login",
                "SubjectClient",
                "WaniKaniComposableClient",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "AuthenticationClient",
            dependencies: [
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Home",
            dependencies: [
                "Profile",
                "SubjectClient",
                "Subjects",
                "SwiftHelpers",
                "SwiftUIHelpers",
                "WaniKaniComposableClient",
                "WaniKaniHelpers",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Lessons",
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Login",
            dependencies: [
                "AuthenticationClient",
                "Home",
                "SwiftUIHelpers",
                "WaniKaniComposableClient",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Profile",
            dependencies: [
                "WaniKaniComposableClient",
                "WaniKaniHelpers",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Reviews",
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "SubjectClient",
            dependencies: [
                "WaniKaniComposableClient",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "Subjects",
            dependencies: [
                "WaniKaniHelpers",
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "SwiftHelpers",
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "SwiftUIHelpers",
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "WaniKaniComposableClient",
            dependencies: [
                .product(name: "ComposableArchitecture", package: "swift-composable-architecture"),
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .target(
            name: "WaniKaniHelpers",
            dependencies: [
                .product(name: "WaniKani", package: "wanikani-swift")
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        ),
        .testTarget(
            name: "SwiftHelpersTests",
            dependencies: [
                "SwiftHelpers"
            ],
            swiftSettings: [
                .define("DEBUG", .when(configuration: .debug))
            ]
        )
    ]
)